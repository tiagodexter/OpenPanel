<!DOCTYPE html>
<html>
<head>
  <title>OpenPanel</title>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="">

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
          -->

          <!--STYLES-->
          <link rel="stylesheet" href="/styles/importer.css">
          <!--STYLES END-->
          <!-- Bootstrap Core CSS -->
          <link href="/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

          <!-- MetisMenu CSS -->
          <link href="/bower_components/metisMenu/dist/metisMenu.min.css" rel="stylesheet">

          <!-- Timeline CSS -->
          <link href="/css/timeline.css" rel="stylesheet">

          <!-- Custom CSS -->
          <link href="/css/sb-admin-2.css" rel="stylesheet">

          <!-- Morris Charts CSS -->
          <link href="/bower_components/morrisjs/morris.css" rel="stylesheet">

          <!-- Custom Fonts -->
          <link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">

          <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.10.6/css/jquery.dataTables.css">

          

          <!--SCRIPTS-->
          <script src="/bower_components/jquery/dist/jquery.min.js"></script>
          <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
          <script src="/js/dependencies/sails.io.js"></script>
          <script src="/js/flot-data.js"></script>
          <script src="/js/morris-data.js"></script>
          <script src="/js/openPanel.js"></script>
          <script src="/js/sb-admin-2.js"></script>
          <!--SCRIPTS END-->
          <script type="text/javascript" charset="utf8" src="//cdn.datatables.net/1.10.6/js/jquery.dataTables.js"></script>


        </head>

        <body>
          <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
            -->

            <!--TEMPLATES-->
            
            <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

        -->

        
      </body>
      </html>
